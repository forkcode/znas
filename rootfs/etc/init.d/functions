#!/bin/sh

setlog(){
        if [ ! -d /var/log ]; then
                mkdir /var/log
        fi

        DATE=`date "+%Y-%m-%d %T"`
	TITLE=$1
        MESSAGE=$2
        LEVEL=$3

        echo $DATE"|"$TITLE"|"$MESSAGE"|"$LEVEL >> /var/log/scripts.log
}

runprocess(){
	DAEMON_NAME=$1
	DAEMON_EXEC=$2
	shift 2
	DAEMON_OPTS=$@

	[ ! -d /var/process ] && mkdir -p /var/process
	if start-stop-daemon --start \
		--make-pidfile --pidfile /var/process/$DAEMON_NAME.pid \
		--exec $DAEMON_EXEC -- $DAEMON_OPTS; then

		setlog $DAEMON_NAME "run $DAEMON_NAME success" 0
	else
		setlog $DAEMON_NAME "run $DAEMON_NAME failed"  1
	fi
}

stoprocess(){
	DAEMON_NAME=$1
        DAEMON_EXEC=$2
	shift 2
	DAEMON_OPTS=$@
        [ ! -d /var/process ] && mkdir -p /var/process
        if start-stop-daemon --stop --quiet\
                --exec $DAEMON_EXEC -- $DAEMON_OPTS; then

		setlog $DAEMON_NAME "stop $DAEMON_NAME success" 0
	else
		setlog $DAEMON_NAME "stop $DAEMON_NAME failed"  1
	fi
}

lockscript(){
	lockpath=/var/lock/
	
	if [ ! -d $lockpath ]; then
		mkdir -p $lockpath
	fi

	if [ -e $lockpath/$1.pid ]; then
		read pid > /dev/null 2>&1 < $lockpath/$1.pid
		if [ -n $pid ]; then
			if [ -e /proc/$pid ]; then
				echo "$pid lock scripts,now exit"
				exit 1
			fi
		fi
	fi

#	echo "process $$ lock scripts now"
	echo $$ > $lockpath/$1.pid
}

freescript(){
	if [ ! -d $lockpath ]; then
		return 1
	fi

	if [ -e $lockpath/$1.pid ]; then
		read pid > /dev/null 2>&1 < $lockpath/$1.pid
		if [ -n $pid ]; then
			if [ $pid == $$ ]; then
#				echo "process $pid free scripts now"
				rm $lockpath/$1.pid
				return 0
			fi
		fi
	fi

	return 1
}

makeuser(){
	[ ! -d /var/run/etc ] && mkdir -p /var/run/etc

	touch /var/run/etc/passwd
	touch /var/run/etc/group
	touch /var/run/etc/shadow

	# create admin
	echo -e "admin\nadmin" | adduser -u 0 -s /bin/sh admin
	# create guest
	adduser -u 512 -s /bin/false guest -D
}

makenode(){
	if [ ! -d /dev ]; then
		setlog makenode "directory /etc not exists" 1
		return 1
	fi

	mknod /dev/console c 5 1
	mknod /dev/full    c 1 7
	mknod /dev/kmem    c 1 2
	mknod /dev/mem     c 1 1
	mknod /dev/null    c 1 3
	mknod /dev/port    c 1 4
	mknod /dev/random  c 1 8
	mknod /dev/urandom c 1 9
	mknod /dev/zero    c 1 5
	ln -s /proc/kcore /dev/core

	mknod /dev/tty c 5 0
	for i in `seq 0 6`; do
        	mknod /dev/tty$i c 4 $i
	done
}
