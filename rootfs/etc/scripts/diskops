#!/bin/sh

diskops_log(){
	local LOGFILE=/var/log/diskops.log
	local DATE=`date "+%Y-%m-%d %T"`

	[ ! -d /var/log ] && mkdir -p /var/log

	echo "[$DATE][$@]"
	echo $DATE"|"$@ >> $LOGFILE
}

<<<<<<< HEAD
diskops_freedisk(){
	local SWAP_PATH="/mnt/base/swap"
	local SWAP_RAID="/dev/md/swapspace"

	service all stop sshd nginx > /dev/null 2>&1

	# stop swap area 
	if [ -f $SWAP_PATH ]; then
		swapoff $SWAP_PATH
		wait $!
	fi
=======
# remove raid from system
diskops_freebase(){
	local RAIDPARTS=$@
	local USERMPATH="/opt"
	local STORMPATH="/mnt/storspace"
        local USERSPACE="/dev/md/userspace"
        local SWAPSPACE="/dev/md/swapspace"

	[ -b $SWAPSAPCE ] && swapoff $SWAPSPACE

	# here is for new system
	mount | grep $USERSPACE >> /dev/null 2>&1
	if [ $? -eq 0 ]; then
		fuser -k $USERMPATH
		busybox umount $USERMPATH
		if [ $? -ne 0 ]; then
                        diskops_log "umount $USERMPATH failed"
                        return 1
                fi
>>>>>>> dff4d696e2fd1f8ae8cc18e882bb6c77dea490cf

		mdadm -S $USERSPACE
		if [ $? -ne 0 ]; then
                        diskops_log "stop $USERSPACE failed"
                        return 1
                fi
	fi

	for x in /dev/md*
        do
                # check $x if mounted
		[ ! -b $x ] && continue
                mount | grep $x
                if [ $? -eq 0 ]; then
                        fuser -k $STORMPATH/`basename $x`
                        busybox umount $x
                        if [ $? -ne 0 ]; then
                                diskops_log "umount $x failed"
                                return 1
                        fi

			mdadm -S $x
			if [ $? -ne 0 ]; then
                        	diskops_log "stop $x failed"
	                        return 1
                	fi
                fi
        done

	return 0
}

# free device from using ....
diskops_freeused(){
	local RAIDPARTS=$@

	for x in $RAIDPARTS
	do
		if [ ! -b $x ]; then
			echo "$x is not a block device"
			continue
		fi

		local MOUNTPATH=`mount | grep "$x" | awk {'print $3'}`
		# kill process which use this mount area
		if [ $MOUNTPATH"NULL" != "NULL" ]; then
			fuser -k $MOUNTPATH
			umount $MOUNTPATH
			if [ $? -ne 0 ]; then
				echo "umount $x failed"
				return 1
			fi
		else
			echo "$x not mount"
		fi
		# check if device used by a raid array
		for b in /dev/md*
		do
			# skip if not block device
			if [ ! -b $b ]; then
				continue
			fi

			local USEDPART=`mdadm --misc -D $b | grep $x | awk {'print $7'}`
			
			if [ $USEDPART"NULL" != "NULL" ]; then
				if [ ! -b $USEDPART ]; then
					echo "$USEDPART not a block device"
					continue
				fi

				mdadm -f $b $USEDPART
				mdadm -r $b $USEDPART

				if [ $? -ne 0 ]; then
					echo "remove $USEDPART from $b failed"
					return 1
				fi
			fi
		done
	done

	return 0
}

diskops_freedisk(){
	local RAIDPARTS=$@
	local PARTCOUNT=$#
	local SELECTALL=1

	# we call diskops_freebase when all disk selected
	for x in /dev/sd[a-z]
	do
		[ ! -b $x ] && continue
		echo $RAIDPARTS | grep $x > /dev/null 2>&1
		[ $? -eq 1 ] && SELECTALL=0
	done

	echo "SELECTALL:$SELECTALL"

	if [ $SELECTALL -eq 1 ]; then
		diskops_freebase
		return $?
	fi
	
	diskops_freeused $RAIDPARTS
	return $? 
}

diskops_makepart(){
	local PARTEDLOG=/var/log/parted.err
	local FormatDEV=$1
	
	[ -f $PARTEDLOG ] && rm $PARTEDLOG

	if [ ! -b $FormatDEV ]; then
		return 1
	fi

	parted -s $FormatDEV mktable gpt >> $PARTEDLOG 2>&1
	[ $? -ne 0 ] && return 1
	
	parted -s $FormatDEV mkpart \
		"primary ext2    0 1024 i" >> $PARTEDLOG 2>&1
	[ $? -ne 0 ] && return 1

	parted -s $FormatDEV mkpart \
		"primary ext2 1024 2048 i" >> $PARTEDLOG 2>&1
	[ $? -ne 0 ] && return 1
	
	parted -s $FormatDEV mkpart \
		"primary ext2 2048 4096 i" >> $PARTEDLOG 2>&1
	[ $? -ne 0 ] && return 1
	
	sleep 1
	mdev -s # fuck with hotplug ... refresh /dev force ...
	
	return 0
}

diskops_makeuser(){
	local USERSPACE="/dev/md/userspace"
	shift 1
	local USERPARTS=$@
	local PARTCOUNT=$#
	local RAIDLABEL="userspace"
	local ERRORFILE="/var/log/makeraid.err"
	local SYSFORMAT="mke2fs -t ext4"

	[ -f $ERRORFILE ] && rm $ERRORFILE;

	if [ -b $USERSPACE ]; then
		mdadm -G $USERSPACE -n4 --force
		for i in $USERPARTS
		do
			if [ -b $i ]; then
#				mdadm --zero-superblock $i
				mdadm $USERSPACE -a $i >> $ERRORFILE 2>&1
				if [ $? -ne 0 ]; then
					diskops_log "$i insert to $USERSPACE failed"
					return 1
				fi
			else
				diskops_log "$i is not a block device"
				return 1
			fi
		done

		return 0
	fi
	# Create a RAID1 with 4 disks
	echo Y | mdadm -C $USERSPACE -l1 -c512 \
		--name=$RAIDLABEL --bitmap=internal \
		-n $PARTCOUNT --force $USERPARTS >> $ERRORFILE 2>&1

	if [ $? -ne 0 ]; then
		diskops_log "make $USERSPACE failed with $USERPARTS"
		return 1
	fi

	# Waiting for RAID1 Sync
	diskops_log "wait for $USERSPACE sync"
	mdadm --misc -W $USERSPACE

	# Format RAID1 with ext4 fs
	diskops_log "Format $USERSPACE with ext4"
	$SYSFORMAT $USERSPACE

	if [ $? -ne 0 ]; then
		diskops_log "Format $USERSPACE failed"
		return 1
	fi

	return 0
}

diskops_makeswap(){
	local SWAPSPACE="/dev/md/swapspace"
	shift 1
	local SWAPLEVEL=1
	local SWAPPARTS=$@
        local RAIDLABEL="swapspace"
        local PARTCOUNT=$#
	local SYSFORMAT="mkswap"
        local FORCEFLAG=""
        local ERRORFILE="/var/log/makeraid.err"

	# only one disk we use --force parameter
	[ $PARTCOUNT -eq 1 ] && FORCEFLAG="--force"

	diskops_log "create $STORSPACE RAID$STORLEVEL with $STORPARTS"

	if [ -b $SWAPSPACE ]; then
		mdadm -G $SWAPSPACE -n4 --force
                for i in $SWAPPARTS
                do
                        if [ -b $i ]; then
                                mdadm --zero-superblock $i
                                mdadm $SWAPSPACE -a $i >> $ERRORFILE 2>&1
                                if [ $? -ne 0 ]; then
                                        diskops_log "$i insert to $SWAPSPACE failed"
                                        return 1
                                fi
                        else
                                diskops_log "$i is not a block device"
                                return 1
                        fi
                done

		return 0
	fi
	
	echo Y | mdadm -C $SWAPSPACE -l$SWAPLEVEL -c512 \
                -n $PARTCOUNT --name=$RAIDLABEL \
                $SWAPPARTS $FORCEFLAG >> $ERRORFILE 2>&1

	if [ $? -ne 0 ]; then
                diskops_log "make $SWAPSPACE fail with $SWAPPARTS"
                return 1
        else
                diskops_log "make $SWAPSPACE pass with $SWAPPARTS"
        fi

	diskops_log "Format $STORSPACE with mkswap"
        $SYSFORMAT $SWAPSPACE

        if [ $? -ne 0 ]; then
	        diskops_log "Format $USERSPACE failed"
                return 1
        fi

	return 0
}

diskops_makestor(){
	local STORLEVEL=$2
	local STORCRYPT=$3
	local STORSPACE=$1
	shift 3
	local RAIDLABEL="storspace"
	local PARTCOUNT=$#
	local STORPARTS=$@
	local CRYPTPATH=/mnt/base/luks/`basename $STORSPACE`
	local CRYPTMDEV=/dev/mapper/`basename $STORSPACE`
	local CRYPTMD5C=""
	local SYSFORMAT="mke2fs -t ext4"
	local FORCEFLAG=""
	local ERRORFILE="/var/log/makeraid.err"

	# only one disk we use --force parameter
	[ $PARTCOUNT -eq 1 ] && FORCEFLAG="--force"

	diskops_log "create $STORSPACE RAID$STORLEVEL with $STORPARTS"

	echo Y | mdadm -C $STORSPACE -l$STORLEVEL -c512 \
		-n $PARTCOUNT --name=$RAIDLABEL \
		$STORPARTS $FORCEFLAG >> $ERRORFILE 2>&1
	
	if [ $? -ne 0 ]; then
		diskops_log "make $STORSPACE fail with $STORPARTS"
		return 1
	else
		diskops_log "make $STORSPACE pass with $STORPARTS"
	fi

	if [ $STORCRYPT -ne 0 ]; then
		[ ! -d $CRYPTPATH ] && make -p $CRYPTPATH

		diskops_log "encrypt $STORSPACE with passwd"

		echo -e $STORCRYPT"\n"$STORCRYPT | cryptsetup luksFormat \
		$STORSPACE -c aes-cbc-plain -s 32 -h ripemd160

		CRYPTMD5C=`echo $STORCRYPT | md5sum | awk '{print $1}'`
		echo $CRYPTMD5C > $CRYPTPATH

		echo -e $STORCRYPT"\n"$STORCRYPT | cryptsetup luksOpen |
		$STORSPACE `basename $STORSPACE`

		diskops_log "Format $STORSPACE with ext4"
		$SYSFORMAT $CRYPTMDEV

		if [ $? -ne 0 ]; then
	                diskops_log "Format $STORSPACE failed"
	                return 1
                fi
	else
		diskops_log "Format $STORSPACE with ext4"
		$SYSFORMAT $STORSPACE

		if [ $? -ne 0 ]; then
                        diskops_log "Format $USERSPACE failed"
                        return 1
                fi
	fi

	return 0
}

diskops_randommd(){
	for i in `seq 0 32`
        do
                if [ ! -b /dev/md$i ]; then
			return $i
                fi
        done
}

diskops_inituser(){
	# Mount RAID1 to /mnt/base
	local USERSPACE="/dev/md/*userspace"
	local MOUNTPATH="/opt"
        local MOUNTEXEC="mount -t ext4"
	local SYSTEMPKG="/pkgs/opt.bz2"
	local ERRORFILE="/var/log/makeraid.err"

	mount | grep $USERSPACE
	[ $? -eq 0 ] && return 0

	diskops_log "Mount $USERSPACE to $MOUNTPATH"

	[ ! -d $MOUNTPATH ] && mkdir -p $MOUNTPATH
	$MOUNTEXEC $USERSPACE $MOUNTPATH >> $ERRORFILE 2>&1
	if [ $? -ne 0 ]; then
        	diskops_log "Mount $USERSPACE to $MOUNTPATH failed"
	        return 1
	fi

	diskops_log "Release database to $MOUNTPATH"

	return 0
}

diskops_initswap(){
	local SWAPSPACE="/dev/md/*swapspace"

	if [ -b $SWAPSPACE ]; then
		swapon $SWAPSPACE
	else
		return 1
	fi

	return 0
}

diskops_initstor(){
	local STORSPACE=$1
        local MOUNTPATH="/mnt/storspace/`basename $STORSPACE`"
        local MOUNTEXEC="mount -t ext4"
	local ERRORFILE="/var/log/makeraid.err"

	sleep 1

	[ ! -d $MOUNTPATH ] && mkdir -p $MOUNTPATH
        $MOUNTEXEC $STORSPACE $MOUNTPATH >> $ERRORFILE 2>&1
        if [ $? -ne 0 ]; then
                diskops_log "Mount $STORSPACE to $MOUNTPATH failed"
                return 1
        fi

	return 0
}



diskops_usage(){
        echo "Usage "`basename $0`":"
        echo "       -l: level for raid: 0 1 4 5 6 10 linear"
        echo "       -s: hot spare device"
        echo "       -e: raid encrypt password"
        echo "       -d: device list"
        echo "       Remark: -d must at end of arguments"
        exit 1
}

diskops_makedisk(){
	RAID_CRYPT=0 #we must give it a value for makestor
	
	while getopts "l:s:e:d:" opt
	do
	case $opt in
                l) RAID_LEVEL=$OPTARG 
                   shift 1;;
                s) RAID_SPARE=$OPTARG 
                   shift 1;;
                e) RAID_CRYPT=$OPTARG 
                   shift 1;;
                d) RAID_PARTS=$OPTARG 
                   shift 1;;
                ?) diskops_usage ;;
        esac
        done
        
	local RAID_PARTS_1=""
	local RAID_PARTS_2=""
	local RAID_PARTS_3=""

	RAID_PARTS=$@
	RAID_COUNT=$#
	
	# set some var 
	for x in $RAID_PARTS
	do
		RAID_PARTS_1="${RAID_PARTS_1}${x}1 "
		RAID_PARTS_2="${RAID_PARTS_2}${x}2 "
		RAID_PARTS_3="${RAID_PARTS_3}${x}3 "
	done

	[ $# -eq 0 ] && diskops_usage

	diskops_freedisk 
	if [ $? -ne 0 ]; then
		diskops_log "freedisk failed"
		exit 1
	fi

	for x in $RAID_PARTS
	do
	diskops_makepart $x
	if [ $? -ne 0 ]; then
                diskops_log "makepart failed"
                exit 1
        fi
	done

	diskops_randommd
	local USERRAID="/dev/md"$?

	diskops_makeuser $USERRAID $RAID_PARTS_1
	if [ $? -ne 0 ]; then
                diskops_log "makeuser failed"
                exit 1
        fi

	diskops_inituser $USERRAID
	if [ $? -ne 0 ]; then
		diskops_log "inituser failed"
		exit 1
	fi

	diskops_randommd
	local SWAPRAID="/dev/md"$?

	diskops_makeswap $SWAPRAID $RAID_PARTS_2
        if [ $? -ne 0 ]; then
                diskops_log "makeswap failed"
                exit 1
        fi

	diskops_initswap $SWAPRAID 
	if [ $? -ne 0 ]; then
                diskops_log "initswap failed"
                exit 1
        fi

	diskops_randommd
	local STORRAID="/dev/md"$?

	diskops_makestor $STORRAID $RAID_LEVEL $RAID_CRYPT $RAID_PARTS_3
	if [ $? -ne 0 ]; then
                diskops_log "makestor failed"
                exit 1
        fi

	diskops_initstor $STORRAID
	if [ $? -ne 0 ]; then
                diskops_log "initstor failed"
                exit 1
        fi	
}

diskops_initznas(){
	diskops_inituser
	if [ $? -ne 0 ]; then
		diskops_log "inituser failed"
		exit 1
	fi

	diskops_initswap
	if [ $? -ne 0 ]; then
		diskops_log "makeswap failed"
		exit 1
	fi

	for i in /dev/md/*storspace*
	do
		if [ -b $i ]; then
			local REALPATH=`readlink $i`
			diskops_initstor $REALPATH
			if [ $? -ne 0 ]; then
				diskops_log "initstor $REALPATH failed"
			fi
		fi
	done

	return 0
}

##########################################
#  this is a gorgeous line for division  #
##########################################

diskops_main(){
	local CALLFUNC=`basename $0`

	case $CALLFUNC in
		makebase) diskops_makedisk $@ ;;
		freebase) diskops_freedisk $@ ;;
		initznas) diskops_initznas $@ ;;
		*) echo "unsupport command: $CALLFUNC" ;;
	esac
}

diskops_main $@
